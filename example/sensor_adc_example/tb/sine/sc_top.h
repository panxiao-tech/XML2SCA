/**
 * This file is automatically generated using [XML2SCA] 
 * Contact : panxiao.tech@gmail.com
 * Web     : http://panxiao.tech/tools/xml2sca/
 * 
 * @file    sensor_adc_example/tb/sine/sc_top.h
 * @author  Xiao Pan (pan@cs.uni-kl.de)
 * @date    10:46:05 Apr 16 2018
 * @section LICENSE License (ADD YOUR LICENSE HERE)
 *  
 * @section DESCRIPTION Description (ADD YOUR DESCRIPTION HERE)
 *          Example project of [XML2AMS]
 * 
 */


#ifndef sc_top_h_

#define sc_top_h_
#include "../../src/basic/json.hpp"
#include "../../src/basic/file_parse.h"
#include "../../src/sca_tdf_sine.h"


//!
//! @brief stimuli module
//!
SCA_TDF_MODULE(sca_tdf_stimuli)
{
	 sca_tdf::sca_in<double>   pin_sine;          

	// constructor
	sca_tdf_stimuli(sc_core::sc_module_name nm){}


	void processing()
	{
		//output port

		//input port
		std::cout<< " readout sine-pout[sine] = " << pin_sine.read()<<std::endl; 
	}
};


//! 
//! @brief testbench toplevel module
//! 
SC_MODULE(sc_top) 
{
	sca_tdf_stimuli      *i_stimuli;
	sca_tdf_sine         *i_sine;

	sca_tdf::sca_signal<double>            sig_from_sine_sine;

	// sample period
	sca_core::sca_time tstep;

	// trace file
	sca_util::sca_trace_file* tf;
	std::string trace_format; 


	// Constructor
	sc_top(sc_core::sc_module_name nm,nlohmann::json  _configs):sc_module(nm)
	{ 

		// get time step from json configuration file  
		tstep = sca_core::sca_time(_configs["system"]["tstep"] ,sc_core::SC_SEC);

		// trace file
		trace_format = _configs["system"]["tracefile"];
		tf = trace_format.compare("vcd") == 0 ?
			sca_util::sca_create_vcd_trace_file("tracefile_sine_tb"):
			sca_util::sca_create_tabular_trace_file("tracefile_sine_tb");

		// top level instances
		i_stimuli      = new sca_tdf_stimuli("i_stimuli");
		i_sine         = new sca_tdf_sine("i_sine",
			            (double)       _configs["i_sine"]["freq"],
			            (double)       _configs["i_sine"]["amp"],
			            (double)       _configs["i_sine"]["offset"]);

		// interconnections 
		i_sine->pout_sine(sig_from_sine_sine);
		i_stimuli->pin_sine(sig_from_sine_sine);

		// setup timestep
		i_stimuli->set_timestep(tstep);
		sca_util::sca_trace(tf, sig_from_sine_sine, "sig_from_sine_sine");

	};


	// Destructor
	~sc_top()
	{
		if(trace_format.compare("vcd")) 
			 sca_close_tabular_trace_file(tf);
		 else
			 sca_close_vcd_trace_file(tf);
	}


};

#endif 
