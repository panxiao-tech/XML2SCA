/**
 * This file is automatically generated using [XML2SCA] 
 * Contact : panxiao.tech@gmail.com
 * Web     : http://panxiao.tech/tools/xml2sca/
 * 
 * @file    sensor_adc_example/src/sca_tdf_adc.h
 * @author  Xiao Pan (pan@cs.uni-kl.de)
 * @date    10:46:05 Apr 16 2018
 * @section LICENSE License (ADD YOUR LICENSE HERE)
 *  
 * @section DESCRIPTION Description (ADD YOUR DESCRIPTION HERE)
 *          Example project of [XML2AMS]
 * 
 */


#ifndef sca_tdf_adc_h_
#define sca_tdf_adc_h_


#include <systemc-ams> 




SCA_TDF_MODULE(sca_tdf_adc) {
public:
	//! in/output ports
	 sca_tdf::sca_in<double>   pin_pos;           	//!power supply voltage positive input
	 sca_tdf::sca_in<double>   pin_neg;           	//!power supply voltage negative input
	 sca_tdf::sc_out<uint16_t> pout_conv;         	//!digital output 

	//! @brief Custom constructor ofsca_tdf_adc
	//! @para vref ADC reference voltage, default is set to 1 [volt]
	//! @para res ADC resolution, default is set to 12 [bits]
	//! @para fs sampling rate, default is set to 100M [Hz]
	//! @para rate Output port rate, default is set to 1
	sca_tdf_adc(sc_core::sc_module_name nm,
		double _vref = 1.0,
		unsigned int _res = 12,
		double _fs = 100e6,
		int _rate = 1 );

	//! @brief Software interface to set adc resolution (accepted values : 9/10/11/12 bits)
	//! @para _res ADC resolution in bits
	//! @para _enable Sampling rate
	//! @return True if set resolution successfuly
	bool set_res(unsigned int _res,bool _enable);

	//! @brief Software interface to change sampling rate 
	//! @para _fs Updated ADC resolution in bits
	//! @para _enable Enable change resolution from software call
	//! @return True if set resolution successfuly
	bool set_fs(double _fs,bool _enable);


private:
	 // Local variables for module parameters
	double p_vref;
	unsigned int p_res;
	double p_fs;
	int p_rate;

	void initialize();
	void processing();
    
    //! @brief return maximum converted value of ADC
    //! @para _value
    //! @return
    uint16_t max_value(uint16_t _value);

    
    //<<< START OF USER-ADDED-CODE >>>>
    long adc_max;
    double adc_lsb;
    double analog;
    long erg;
    long bv_erg;
    //<<< END OF USER-ADDED-CODE >>>
};
#endif 
